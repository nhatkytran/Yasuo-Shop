openapi: 3.0.3
info:
  title: Yasuo API - Yasup Shop
  description: |-
    This API provides programmatic access to a vast collection of merchandise related to the popular game League of Legends.
    Integrate this API into your application to offer users a convenient way to browse, search, and potentially purchase officially licensed League of Legends merchandise.

    **Back-end**: TypeScript, NodeJS (ExpressJS), MongoDB (Mongoose), Zod, AWS S3, Stripe Payment, EJS, Acess Token and Refresh Token (Public Key and Private Key), Google OAuth 2.0,...

    **Testing and Performance**: Jest, Supertest, Premetheus

    **Serverless**: Netlify Functions, Airtable, TypeScript

  contact:
    email: nhockkutean2@gmail.com
  version: 1.0.0
externalDocs:
  description: Source code - Github
  url: https://github.com/nhatkytran/Yasuo-Shop

servers:
  - url: https://yasuo-api.onrender.com/
  - url: https://yasuo-api-serverless.netlify.app
  - url: http://127.0.0.1:1337

tags:
  - name: Information
    description: Check server is live and some information about API

  - name: Metadata
    description: |
      Serverless - Metadata for UI

      **https://yasuo-api-serverless.netlify.app**
    externalDocs:
      description: Netlify Functions
      url: https://www.netlify.com/platform/core/functions/

  - name: Users
    description: API for users management (Sign-up, Activation, Reset Password,...)

  - name: Sessions
    description: API for sessions management (Sign-in, Sign-out, OAuth,...)

  - name: Products
    description: API for products management

  - name: Purchases
    description: API for purchases management

  - name: Reviews
    description: API for reviews management

paths:
  # Information ##########

  /:
    get:
      tags:
        - Information
      summary: Get API information
      description: |
        Returns a JSON response with a status and a message providing information about the API creator.
      operationId: /
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: The message containing information about the API creator.
                    example: 'This API is created by Trần Nhật Kỳ. Contact: nhockkutean2@gmail.com'

  /language:
    get:
      tags:
        - Information
      summary: Get current language
      description: |
        Returns the current language setting (This API is created to support 2 languages ['en-us', 'fr'] for now).
        There a midlleware to control language, language can be changed using query:
        **?language=en-us** | **?language=fr**
      operationId: language
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
      responses:
        '200':
          description: Successful response with the current language
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    type: string
                    description: The current language setting.
                    example: en-us
        '400':
          $ref: '#/components/responses/LanguageNotSupported'

  # Metadata ##########

  /api/v1/slides:
    get:
      tags:
        - Metadata
      summary: Get all slides
      description: Returns a list of slides with detailed information.
      operationId: getAllSlides
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: The unique identifier for the slide.
                    example: rec9jVapZERCuknP6
                  name:
                    type: string
                    description: The name of the slide.
                    example: Secretlab x VALORANT
                  image:
                    type: string
                    format: uri
                    example: 'https://v5.airtableusercontent.com/v3/u/29/29/1715760000000/uBxV5D2kiHZy4dxCGCRdog/koTBcedmUK-BsGgXTaXfYYEQf7zgs04hFk9_vjz49KE34tI6zm0tyLCV27tmd3PgKzWmKSJxxP8jgIs0ZbrGo1vU_K8VPrSiw7ZODoOTu2sBsVPeceregZJwtzIDJ5z-GHYcwn3RgzbIcl8iTfWVth4k0rTDgoK-87NNu16PQpQ/KWg_vo7IO8sPvxmrWBdIz0l70EdRplWkvNCi54hzJZQ'
        '400':
          $ref: '#/components/responses/LanguageNotSupported'

  /api/v1/banners:
    get:
      tags:
        - Metadata
      summary: Get all banners or a single banner
      description: Returns a list of banners with detailed information.
      operationId: getAllBanners
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
        - $ref: '#/components/parameters/ServerlessIDQuery'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  banners:
                    type: array
                    description: A list of banners.
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The unique identifier for the banner.
                          example: recO9dmWhqEJPUi9e
                        name:
                          type: string
                          description: The name of the banner.
                          example: Ruination Collectors Edition
                        description:
                          type: string
                          description: The description of the banner.
                          example: Meet the new Secretlab Memory Foam Lumbar Pillow Poro Party Edition. Fluffy, adorable, and soft as snow - get yours now!
                        image:
                          type: string
                          format: uri
                          example: 'https://v5.airtableusercontent.com/v3/u/29/29/1715760000000/4c9DEZftrf1S4PnmWutCZw/w0goBsvisnN0CCtmQShuF76MnIW3mCiCnvblNEbqaRutV-EWkj-iExS59rQOczQ42-9k_uzyn5vPLUJsNOSSvJAAHhFFC9_Ton8b0berrrlPIATZbmF0NyFiZl8jwDLan_vfGpbuWC38_6_Ri5OyBKykeQHznvDkxdtBUkh-eM8/gtiUr1t5_rYfKk9u3qxMguMZK4e8t-JiEO7gL8B7Kf8'
        '400':
          $ref: '#/components/responses/LanguageNotSupported'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/promos:
    get:
      tags:
        - Metadata
      summary: Get all promos or a single promo
      description: Returns a list of promos with detailed information.
      operationId: getAllPromos
      parameters:
        - $ref: '#/components/parameters/ServerlessIDQuery'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  promos:
                    type: array
                    description: A list of promos.
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The unique identifier for the promo.
                          example: rechbp4YPWOtG8ZhU
                        category:
                          type: string
                          enum:
                            - main
                            - featured
                            - sale
                          description: The category of the promo.
                          example: featured
                        collection:
                          type: string
                          description: The collection of the promo (Not all promo have 'collection' property).
                          example: msi
                        image:
                          type: string
                          format: uri
                          example: 'https://v5.airtableusercontent.com/v3/u/29/29/1715760000000/VfAW5o0ouafshZjK9KTUbw/CpRBOaiKhlzTZZNee0kNKnpn-TsSkhLNHQdCt2kK4L9nNmJu0iXaE8yjCZuIjLe7Hy460i-o0emQ7fhMk1ODOKdumkpdZqHeQ2447RdQa1aeZ9_TZoIhm0rifV1WGCyw-utSkMRJGNg-NaoVvgFgCcRdpFFXvO_SzF7re5iw44c/AL-qH-ISk-sjcTvPaPvKFUhpvQuFKxy3zR0-NyyKGmI'
        '404':
          $ref: '#/components/responses/NotFound'

  # User ##########

  /api/v1/users/signup:
    post:
      tags:
        - Users
      summary: Sign-up (activation code will sent to user's email)
      description: Creates a new user account and sends an activation code to the user's email.
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: 'Tester'
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
                passwordConfirm:
                  type: string
                  description: 'Confirmation of the password.'
                  example: 'userpassword3Mm$'
      responses:
        '201':
          description: User successfully signed up
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: 'A message indicating the outcome of the signup process'
                    example: 'Sign up successfully. Your activate code is sent to your email! Please check.'
                  user:
                    type: object
                    properties:
                      _id:
                        $ref: '#/components/schemas/ID'
                      name:
                        type: string
                        description: 'The name of the user'
                        example: 'Tester'
                      email:
                        $ref: '#/components/schemas/Email'
                      photo:
                        type: string
                        description: "The URL of the user's profile photo"
                        example: '/img/users/default.png'
                      active:
                        type: boolean
                        description: "Indicates whether the user's account is active (Use code received in user's email to activate user)"
                        example: false
                      role:
                        type: string
                        description: 'The role assigned to the user'
                        example: 'user'
                      createdAt:
                        type: string
                        format: date-time
                        description: 'The timestamp when the user account was created'
                        example: '2024-05-15T05:12:46.943Z'
                      updatedAt:
                        type: string
                        format: date-time
                        description: 'The timestamp when the user account was last updated'
                        example: '2024-05-15T05:12:47.286Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/activate-code/{email}:
    get:
      tags:
        - Users
      summary: Resend Activation Code
      description: Sends a new activation code to the user's email.
      operationId: activateCode
      parameters:
        - $ref: '#/components/parameters/EmailParam'
      responses:
        '200':
          description: Activation code successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    description: 'A message indicating the outcome of the activation code resend process'
                    example: 'Activation code has been sent to your email. Please check.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/activate:
    patch:
      tags:
        - Users
      summary: Activate User Account
      description: Activates a user account using the provided activation code.
      operationId: activate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                code:
                  $ref: '#/components/schemas/Code'
      responses:
        '200':
          description: User account successfully activated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: 'A message indicating the outcome of the account activation process'
                    example: 'Activate account successfully.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/InvalidOrExpiredToken'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/forgot-password/{email}:
    get:
      tags:
        - Users
      summary: Forgot Password
      description: Sends a forgot password code to the user's email.
      operationId: forgotPassword
      parameters:
        - $ref: '#/components/parameters/EmailParam'
      responses:
        '200':
          description: Forgot password code successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: 'A message indicating the outcome of the forgot password code request'
                    example: 'Forgot password code has been sent to your email. Please check.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/reset-password:
    patch:
      tags:
        - Users
      summary: Reset User Password
      description: Resets a user's password using the provided email, reset code, and new password.
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                code:
                  $ref: '#/components/schemas/Code'
                newPassword:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: Password successfully reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: 'A message indicating the outcome of the password reset process'
                    example: 'Reset password successfully.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/InvalidOrExpiredToken'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/update-password:
    patch:
      tags:
        - Users
      summary: Update user password
      description: Updates the password of the authenticated user.
      operationId: updatePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  $ref: '#/components/schemas/Password'
                newPassword:
                  type: string
                  description: 'The new password to be set'
                  example: 'userpassword3Mm$2'
                passwordConfirm:
                  type: string
                  description: 'Confirmation of the new password'
                  example: 'userpassword3Mm$2'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: 'A message indicating the success of the operation'
                    example: 'Update password successfully!'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/ban-account:
    post:
      tags:
        - Users
      summary: Ban a user account - Admin
      description: |
        Bans a user account based on the provided email.

        **Only Admin can perform this action**
      operationId: banAccount
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: 'The email address of the user to ban'
                  example: 'tester@gmail.com'
      responses:
        '200':
          description: User account banned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: 'A message indicating the success of the operation'
                    example: 'User has been banned!'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/upload-photo-presigned-url:
    get:
      tags:
        - Users
      summary: Get pre-signed URL for photo upload
      description: Generates a pre-signed URL for uploading a user photo. The URL is valid for 1 minute and can be used only once to upload an image.
      operationId: uploadPhotoPresignedUrl
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Pre-signed URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A message indicating the successful generation of the pre-signed URL
                    example: 'Generate pre-signed URL successfully (only valid for 1 minute and only be used to upload one image).'
                  url:
                    type: string
                    description: The pre-signed URL for uploading the image
                    example: 'https://presignedurldemo.s3.eu-west-2.amazonaws.com/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJJWZ7B6WCRGMKFGQ%2F20180210%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180210T171315Z&X-Amz-Expires=1800&X-Amz-Signature=12b74b0788aa036bc7c3d03b3f20c61f1f91cc9ad8873e3314255dc479a25351&X-Amz-SignedHeaders=host'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '405':
          description: Internal Server Error, an unexpected error occurred
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/FailMessage'
                  message:
                    type: string
                    description: A message indicating the reason for the failure
                    example: Sorry, we don't support this action now
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/me:
    get:
      tags:
        - Users
      summary: Get user's own data
      description: Retrieves information about the currently authenticated user.
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - Users
      summary: Update user profile
      description: Updates the profile information of the authenticated user.
      operationId: updateMe
      security:
        - BearerAuth: []
      requestBody:
        description: This route can only update the name, the photo, or both of the user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The user's name"
                  example: 'Tester'
                photo:
                  type: string
                  description: "The path to the user's profile photo"
                  example: '/img/users/default.png'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: 'A message indicating the success of the operation'
                    example: 'Update user successfully.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users:
    get:
      tags:
        - Users
      summary: Get all users - Admin
      description: |
        Retrieves a list of all users.

        **Only Admin can perform this action**
      operationId: getAllUsers
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "name": "Tester" }

            Sorting: { "sort": "name" }

            Projecting: { "fields": "name" }

            Pagination: { "page": 1, "limit": 3 }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Users retrieved successfully - User data can have more fileds than the example value.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - Users
      summary: Create a new user - Admin
      description: |
        Creates a new user account with the provided details.

        **Only Admin can perform this action**
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        description: The request body can have more fields based on the admin's needs.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user'
                  example: 'Tester'
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
                active:
                  type: boolean
                  description: 'The active status of the user'
                  example: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: 'A message indicating the success of the operation'
                    example: 'Create user successfully.'
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/{email}:
    get:
      tags:
        - Users
      summary: Get user by email - Admin
      description: |
        Retrieves the details of a user by their email address.

        **Only Admin can perform this action**
      operationId: getUser
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/EmailParam'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                    numResults:
                      $ref: '#/components/schemas/NumResults'
                    user:
                      $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Users
      summary: Delete user by email
      description: |
        Deletes a user by their email address.

        **An admin can delete any user.
        Users can only delete their own accounts.
        Deleting does not actually remove the user; it just marks the user as deleted.**
      operationId: deleteUser
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/EmailParam'
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/admin-restore/{email}:
    patch:
      tags:
        - Users
      summary: Restore a banned user account - Admin
      description: |
        Restore a user account that was previously banned (Admin can restore any user).

        **Only Admin can perform this action**
      operationId: adminRestore
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/EmailParam'
      responses:
        '200':
          description: User restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: A message indicating the successful restoration of the user
                    example: 'Restore user successfully.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/user-restore-code/{email}:
    get:
      tags:
        - Users
      summary: Request restore code for a banned user
      description: Sends a restore code to the specified email address for a banned user (Users can restore their own accounts, which have not been deleted by the admin).
      operationId: userRestoreCode
      parameters:
        - $ref: '#/components/parameters/EmailParam'
      responses:
        '200':
          description: Restore code sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: A message indicating the successful sending of the restore code
                    example: 'Restore code has been sent to your email. Please check.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/user-restore:
    patch:
      tags:
        - Users
      summary: Restore a banned user account
      description: Restore a user account using the provided restore code.
      operationId: userRestore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                code:
                  $ref: '#/components/schemas/Code'
      responses:
        '200':
          description: User restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: A message indicating the successful restoration of the user
                    example: 'Restore user successfully.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # Sessions ##########

  /api/v1/sessions/signin:
    post:
      tags:
        - Sessions
      summary: Sign-in
      description: |
        Authenticates a user and returns access and refresh tokens (Access and refresh tokens are also sent via Cookie).

        User only has 5 sign-in attempts, if there is not any attempt left, user needs to wait for an hour.
      operationId: signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: User successfully signed in
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'The status of the request'
                    example: 'success'
                  accessToken:
                    type: string
                    description: 'The access token for authenticating API requests'
                    example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI2NjQ0NzQyZTkzZDk1YTkxYTU5MzdlNDgiLCJzZXNzaW9uSUQiOiI2NjQ0NzQ2ZTkzZDk1YTkxYTU5MzdlNGQiLCJpYXQiOjE3MTU3NjIyODYsImV4cCI6MTcxNTc2NDA4Nn0.wIe748yVg4d_O6Lc9NEJtAnCsfVaSKZVlTrGYqaBWI19i3jw7fYKCXOTmg0LinOfKPDlUXm2GIzAxg4cV6M5JOT5xCRQ62qxur2B4IxrkDd20Das2DDiq5FUKeK0qUHgFwC2oqEbeQdtm-LgLgE4SXUgqJT0XbjQAcgyXyACSfh-h7rM8A_MnypROvI9RRD7Lc6CvJQeO21QdcSfJZ6a-mLYbNxnf_3j7gFzL5dOthTcvv7Az88jSaiaCvUoYc6WpRHj8WUK9qxX-DRYuy6hbQ1wrDJmckWN8Mc3kaQkkKdWKHKvda41LVCVIdzWLZr1HwlNyd8tGR5U8olpE_5FFdUzW0EP81qH6AnK_dDN4dUfMObA3BOLN-bQ7ZRwSuRPmxBXGyZychRozZXfrmNg99STVrEsdUQpRO2pxXFzOeCG4t1-JOEXoZs-ENbnZydPSe_CUfzN-kV4HkY2Z2AneTUKS_BUrkSllC2TR9aXxxfd1b4Tu6OCiRL3dxxGlL5fzJ3vWGjoJ1q0EukdGycOFecbSY6AK4vDPM7geHiB_3KrCxiEGm4uIuqFOVKzaNcJXDFRTmXPKw4UtdS-f7C8hVVno3Kxvadl2f6pP7CJf76b3wgdLlMTQB88pjm55M-quuh2v1nufVs1DZMTERbFdQJxPuaww9YL5hQ0OvREdL4'
                  refreshToken:
                    type: string
                    description: 'The refresh token for obtaining new access tokens'
                    example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI2NjQ0NzQyZTkzZDk1YTkxYTU5MzdlNDgiLCJzZXNzaW9uSUQiOiI2NjQ0NzQ2ZTkzZDk1YTkxYTU5MzdlNGQiLCJpYXQiOjE3MTU3NjIyODYsImV4cCI6MTcxODM1NDI4Nn0.McOhRIg6hPt8IZ1uP6qDsALI2bCaXzyY5hvro5_VXkllReSkfp9lk2UnUNTxIb3NddAmVfW7IAlFC0ZEpBfF9zaYk-piSR4Unwyn9mGqlKO0XTEZV3kehGayuwMjaAWmEngTFlYWOhw7bFWmzmdSui4fxLPZDHQxGVs9IXRYjTzC8-JAfTCfbwd3m39SNXi8sQ3erf_5y6qxgxDFKg0QVqh8XWjLHZuTi767DMLRBQSs8DE08Aqa5Xi07IIWW6L8nmSCsr_Jw1JE0zBcU8TXHoDfFB4onK6WHIWhR66zKk-k6NNoq6UO1DeU0zvKQTGIgQs3fYt2cYbvrzrnPi4do1LEy_DVf1gIE4RM2uJIYYiAv8yzJ7_gXn1UBHLL3RB8nplw24fs_2QQkLDRxqLBiaBslHnGQgt9J34pcjRYQIKftALFLk9EOC1lRLeV8f8QRiQjMpe9qXJM2IWgwatD40q2iF-x9LOuurRvhyoEGmMkRPzapaLxPE5qnHbv-tjUXNZSMQSwD5qP7_Z3lWQjWYUV1UxPrkhPQKvY2qfLdAG15J5l7Gau9VIC90ct9B9uETieXuoVWXhM0QivD4OXgGj7BoBO63t5SthU9dozXPXUUI1uarxowD-BJpOJVm29dZnldgCeWeqdNmEorZ7SxnrYYN6XQ9cL-lUmgD9SY_E'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/sessions/oauth/google/consent:
    get:
      tags:
        - Sessions
      summary: Get consent for Google OAuth
      description: Redirects the user to the Google consent page to grant permission for OAuth.
      operationId: googleConsent
      responses:
        '302':
          description: Redirect to Google consent page
          headers:
            Location:
              description: URL of the Google consent page
              schema:
                type: string
                example: https://accounts.google.com/o/oauth2/auth
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/sessions/oauth/google/callback:
    get:
      tags:
        - Sessions
      summary: Google OAuth callback
      description: Handles the callback from Google OAuth authentication.
      operationId: googleCallback
      parameters:
        - name: code
          in: query
          required: true
          description: Authorization code received from Google
          schema:
            type: string
        - name: state
          in: query
          required: true
          description: State parameter received from Google
          schema:
            type: string
      responses:
        '302':
          description: Redirect to frontend after successful authentication
          headers:
            Location:
              description: URL to redirect to after successful authentication
              schema:
                type: string
                example: https://frontend.example.com?email=email&googleToken=googleToken
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/sessions/oauth/google/signin:
    post:
      tags:
        - Sessions
      summary: Sign in with Google OAuth (email & googleToken)
      description: Sign in using Google OAuth authentication (email & googleToken are from oauth/google/callback redirection).
      operationId: googleSignin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                googleToken:
                  type: string
                  description: Token received from Google OAuth authentication
                  example: 33a7c9f57a8a
      responses:
        '200':
          description: Successfully signed in
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The status of the request
                    example: 'success'
                  accessToken:
                    type: string
                    description: Access token for accessing protected resources
                    example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI2NjQ1Y2RkYzk3YWEwNThmYzk1MzRmNTIiLCJzZXNzaW9uSUQiOiI2NjQ1ZDhhMTg0OTJhMzcxNDliMjEyYzgiLCJpYXQiOjE3MTU4NTM0NzMsImV4cCI6MTcxNTg1NTI3M30.f7YNbJS0tXD3WbOeM6HOsZHM3Qq7boHOUNAIT1AhOyZF9TENc6ailDffXyWNFGC-XyXhZhyHk8r332nGlA_PecbOFM65qaziWEQS6vFT2G3RNt0uQtpOOuz0g6RmiW2dM2sVYQsv-a44brNgMIp7RtuXdygZMvuwirKD8boIJ6nwOR3ueYqIH9KIHTvg0ielhjYfxl2gc-6-WphphSjCfM6fhih7sy9zMo20w5SFOxLfEDY42qdJXyP5J5RWjhxpNCiM8vBG4BwNHfekWiz-m37elH56a-4V1YPQXEvluesXSKgnvLlSwX6ScujgMOfEojepQlR0pKOMNi9BNlTl2ikS5mj0C_SypXsr-ykGJJVASEJoMt1etEv8Rv4u-x7QTSbyxLsYO86KJ-M15G8XJelWWkTmurbYCwcDLizJ1dx0WUKAQDjwRmVld-mtDMq46FV8n7nRVHrqPUKm8WGskU9k5ZKPtipbfhCQ-cfFNe8_uOHiMw0BsZ1tjsNO3YXvJMAOA101VzOsSzGfXVxfBiBIqbVRqjyK_bJ19bbiIilHrP2m0Q-FVKw4rGUnol1bFa6-Wto_Ow1FGVbI2DgQZ-oAVqrc-aIN10tnyhyriJDLcVpelumrUeTvOj4fjsTSJugvVb_cXDBxpqHHglIZFO213XWycHuV0zLfGdu2kFc
                  refreshToken:
                    type: string
                    description: Refresh token for obtaining new access tokens
                    example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI2NjQ1Y2RkYzk3YWEwNThmYzk1MzRmNTIiLCJzZXNzaW9uSUQiOiI2NjQ1ZDhhMTg0OTJhMzcxNDliMjEyYzgiLCJpYXQiOjE3MTU4NTM0NzMsImV4cCI6MTcxODQ0NTQ3M30.hUlI5MccwrUvLb7C4WcEkDQ101i3aFDOHOjRCVZvZiEPyQ1wDb9eOPBMuCf967lKkQWkvxdfabITPbnhkl2gQN4IoNAijs0EQeACa8SN-NYE3LgnjEXiv1ubHS6IboOCicC0PiirqWSKkBiK_BEp3EXzo_GkPbEUhaV59VB3yKT3J24fhVu3IdL6aqfhCBsFajtSRWFYb0nGASVtBTfqh23uFocoK0nDEoVWvYIWQy2dBPsohPV4DiB9Y9HneYcL62ZxAHr3t18OaOdySGDuJWg_LVfK3JfONgk9emcypW9B-5C_DKjwPhs1TkheAqUsxIhDEs3LmKdCj8qNSqwlSX0ucoH3FL9yTE1hL56fUGz9_EVJx2AULYIe5--AIZL0W-WqSwVq-7RTgTWpTx3x6VnFB-8qguJ0f7G9gknLcQJEDb4f6R0e7cPb8l7iAQBOV-MwJbVGGTgeKVwkVmMacDbHMAAD2tIkRiO0l4bx_-bBxsIAW0C44ZgBtvbEI6-oDFluepFCpYywRGuX7-foBNzwqOjoco6TR-H1axcrV0L_TFP8nJXcSdn9OWUdZWGA0GGcI64DfUk8uCy45WHyLo06QEQfp-nB9bxtyqezvFl1XqkiH0zPHN665K6NzrRPXn9R5iKVUEbSikSv0ZB0-htblmwJDipHfmVOZOqL0nc
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/sessions/signout:
    get:
      tags:
        - Sessions
      summary: Sign-out
      description: Sign out the currently authenticated user
      operationId: signout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully signed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: A message indicating the success of the operation
                    example: 'Sign out successfully.'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/sessions/signout-everywhere:
    get:
      tags:
        - Sessions
      summary: Sign out everywhere
      description: Sign out the user from all active sessions
      operationId: signoutEverywhere
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully signed out from all sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  message:
                    type: string
                    description: A message indicating the success of the operation
                    example: 'Sign out everywhere successfully.'
                  modifiedCount:
                    $ref: '#/components/schemas/ModifiedCount'
                  matchedCount:
                    $ref: '#/components/schemas/MatchedCount'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/sessions:
    get:
      tags:
        - Sessions
      summary: Get all sessions - Admin
      description: |
        Retrieve information about all sessions

        **Only Admin can perform this action**
      operationId: getAllSessions
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "user": "6644742e93d95a91a5937e48" }

            Sorting: { "sort": "createdAt" }

            Projecting: { "fields": "user" }

            Pagination: { "page": 1, "limit": 3 }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Successfully retrieved all session information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  sessions:
                    type: array
                    description: Array containing session information
                    items:
                      $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - Sessions
      summary: Deactivate all sessions - Admin
      description: |
        Deactivate all sessions except for those associated with admin users

        **Only Admin can perform this action**
      operationId: deactivateAllSessions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sessions successfully deactivated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  modifiedCount:
                    $ref: '#/components/schemas/ModifiedCount'
                  matchedCount:
                    $ref: '#/components/schemas/MatchedCount'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Sessions
      summary: Delete all sessions - Admin
      description: |
        Delete all sessions except for those associated with admin users

        **Only Admin can perform this action**
      operationId: deleteAllSessions
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Sessions successfully deleted
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/{userID}/sessions:
    get:
      tags:
        - Sessions
      summary: Get user sessions - Admin
      description: |
        Retrieve information about sessions associated with a specific user

        **Only Admin can perform this action**
      operationId: getUserSessions
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIDParam'
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "user": "6644742e93d95a91a5937e48" }

            Sorting: { "sort": "createdAt" }

            Projecting: { "fields": "user" }

            Pagination: { "page": 1, "limit": 3 }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Successfully retrieved user session information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  sessions:
                    type: array
                    description: Array containing session information
                    items:
                      $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - Sessions
      summary: Deactivate user sessions - Admin
      description: |
        Deactivate all sessions associated with a specific user

        **Only Admin can perform this action**
      operationId: deactivateUserSesssions
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIDParam'
      responses:
        '200':
          description: Sessions successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  modifiedCount:
                    $ref: '#/components/schemas/ModifiedCount'
                  matchedCount:
                    $ref: '#/components/schemas/MatchedCount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Sessions
      summary: Delete all sessions for a user - Admin
      description: |
        Deletes all sessions for a specific user

        **Only Admin can perform this action**
      operationId: deleteUserSesssions
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIDParam'
      responses:
        '204':
          description: Sessions successfully deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/sessions/{sessionID}:
    get:
      tags:
        - Sessions
      summary: Get session - Admin
      description: |
        Retrieves details of a specific session

        **Only Admin can perform this action**
      operationId: getSession
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/SessionIDParam'
        - $ref: '#/components/parameters/ProjectQuery'
      responses:
        '200':
          description: Session details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  session:
                    $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - Sessions
      summary: Deactivate session - Admin
      description: |
        Deactivates a specific session, making it invalid

        **Only Admin can perform this action**
      operationId: deactivateSession
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/SessionIDParam'
      responses:
        '200':
          description: Session deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  session:
                    $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Sessions
      summary: Delete session - Admin
      description: |
        Deletes a specific session

        **Only Admin can perform this action**
      operationId: deleteSession
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/SessionIDParam'
      responses:
        '204':
          description: Session deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # Products ##########

  /api/v1/products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Returns a list of products with detailed information.
      operationId: getAllProducts
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "name": "Jimei Palace Aatrox 1/6 Scale Statue" }

            Sorting: { "sort": "price.default" }

            Projecting: { "fields": "name,price" }

            Pagination: { "page": 1, "limit": 3 }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  products:
                    type: array
                    description: A list of products.
                    items:
                      $ref: '#/components/schemas/Product'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - Products
      summary: Create a new product - Admin
      description: |
        Creates a new product with the provided details.

        **Only Admin can perform this action**
      operationId: createProduct
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  products:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/products/{productID}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Returns detailed information about a specific product by its ID.
      operationId: getProduct
      parameters:
        - $ref: '#/components/parameters/ProductIDParam'
        - $ref: '#/components/parameters/LanguageQuery'
        - $ref: '#/components/parameters/ProjectQuery'
      responses:
        '200':
          description: Successful response with product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  products:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - Products
      summary: Update a product - Admin
      description: |
        Updates a product with the specified ID.

        **Only Admin can perform this action**
      operationId: updateProduct
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
        - $ref: '#/components/parameters/ProductIDParam'
      requestBody:
        description: Admin can update any field of a product (only declare fields that need updating)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  products:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Products
      summary: Delete a product - Admin
      description: |
        Deletes a product with the specified ID.

        **Only Admin can perform this action**
      operationId: deleteProduct
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
        - $ref: '#/components/parameters/ProductIDParam'
      responses:
        '204':
          description: Product deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/products/top-5-cheap:
    get:
      tags:
        - Products
      summary: Get the top 5 cheap products
      description: Returns a list of the top 5 cheapest products available.
      operationId: top5Cheap
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "name": "Jimei Palace Aatrox 1/6 Scale Statue" }

            Projecting: { "fields": "name,price" }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  products:
                    type: array
                    description: A list of products.
                    items:
                      $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/products/stats-category:
    get:
      tags:
        - Products
      summary: Get product statistics by category - Admin
      description: |
        Retrieves statistics about products grouped by category.

        **Only Admin can perform this action**
      operationId: getStatsCategory
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
      responses:
        '200':
          description: Product statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  stats:
                    $ref: '#/components/schemas/Stats'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/products/stats-editions:
    get:
      tags:
        - Products
      summary: Get product statistics by editions - Admin
      description: |
        Retrieves statistics about products grouped by editions.

        **Only Admin can perform this action**
      operationId: getStatsEditions
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
      responses:
        '200':
          description: Product statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  stats:
                    $ref: '#/components/schemas/Stats'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  # Purchases ##########

  /api/v1/purchases/checkout-session:
    post:
      tags:
        - Purchases
      summary: Create a checkout session for Stripe payment
      description: This endpoint creates a checkout session using Stripe for the specified purchase.
      operationId: createCheckoutSession
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  description: List of products to be purchased
                  items:
                    type: object
                    properties:
                      productID:
                        $ref: '#/components/schemas/ID'
                      quantity:
                        type: integer
                        description: The quantity of the product to purchase
                        example: 1
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  session:
                    type: object
                    description: Stripe checkout session details
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /webhook-checkout:
    post:
      tags:
        - Purchases
      summary: Handle Stripe webhook events - Stripe
      description: This endpoint handles Stripe webhook events related to checkout sessions. It processes the event data sent by Stripe to perform actions such as updating purchase statuses.
      operationId: handleStripeWebhook
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    type: object
                  error:
                    example: null

  /api/v1/purchases/user-purchases:
    get:
      tags:
        - Purchases
      summary: Get all purchases of the authenticated user
      description: |
        Returns a list of all purchases made by the authenticated user.

        **Only Users can perform this action**
      operationId: getUserPurchases
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "price": 20 }

            Sorting: { "sort": "price" }

            Projecting: { "fields": "price" }

            Pagination: { "page": 1, "limit": 3 }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  purchases:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/Purchase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/purchases:
    get:
      tags:
        - Purchases
      summary: Get a list of all purchases - Admin
      description: |
        Returns a list of all purchases made by users.

        **Only Admin can perform this action**
      operationId: getAllPurchases
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "price": 20 }

            Sorting: { "sort": "price" }

            Projecting: { "fields": "price" }

            Pagination: { "page": 1, "limit": 3 }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  purchases:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/Purchase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - Purchases
      summary: Create a new purchase - Admin
      description: |
        This endpoint creates a new purchase record with the provided details.

        **Only Admin can perform this action**
      operationId: createPurchase
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/ID'
                product:
                  $ref: '#/components/schemas/ID'
                price:
                  type: number
                  format: float
                  description: The price of a single unit of the purchased item
                  example: 1111
                quantity:
                  type: integer
                  description: The quantity of the purchased item
                  example: 11
                paid:
                  type: boolean
                  description: Whether the purchase has been paid for
                  example: true
                shipped:
                  type: boolean
                  description: Whether the purchase has been shipped
                  example: true
                createdAt:
                  $ref: '#/components/schemas/CreatedAt'
                updatedAt:
                  $ref: '#/components/schemas/UpdatedAt'
      responses:
        '201':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  purchase:
                    type: object
                    properties:
                      _id:
                        $ref: '#/components/schemas/ID'
                      user:
                        $ref: '#/components/schemas/ID'
                      product:
                        $ref: '#/components/schemas/ID'
                      price:
                        type: number
                        format: float
                        description: The price of a single unit of the purchased item
                        example: 1111
                      quantity:
                        type: integer
                        description: The quantity of the purchased item
                        example: 11
                      paid:
                        type: boolean
                        description: Whether the purchase has been paid for
                        example: true
                      shipped:
                        type: boolean
                        description: Whether the purchase has been shipped
                        example: true
                      createdAt:
                        $ref: '#/components/schemas/CreatedAt'
                      updatedAt:
                        $ref: '#/components/schemas/UpdatedAt'
                      totalPrice:
                        type: number
                        format: float
                        description: The total price for the purchase (price * quantity)
                        example: 40
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/users/{userID}/purchases:
    get:
      tags:
        - Purchases
      summary: Get purchases for a specific user - Admin
      description: |
        Returns a list of all purchases made by the specified user.

        **Only Admin can perform this action**
      operationId: getUserPurchasesByID
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIDParam'
        - $ref: '#/components/parameters/LanguageQuery'
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "price": 20 }

            Sorting: { "sort": "price" }

            Projecting: { "fields": "price" }

            Pagination: { "page": 1, "limit": 3 }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  purchases:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/Purchase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/products/{productID}/purchases:
    get:
      tags:
        - Purchases
      summary: Get purchases for a specific product - Admin
      description: |
        Returns a list of all purchases made by the specified product.

        **Only Admin can perform this action**
      operationId: getProductPurchasesByID
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProductIDParam'
        - $ref: '#/components/parameters/LanguageQuery'
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "price": 20 }

            Sorting: { "sort": "price" }

            Projecting: { "fields": "price" }

            Pagination: { "page": 1, "limit": 3 }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  purchases:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/Purchase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/purchases/{purchaseID}:
    get:
      tags:
        - Purchases
      summary: Get details of a specific purchase - Admin
      description: |
        Returns the details of a specific purchase identified by its ID.

        **Only Admin can perform this action**
      operationId: getPurchase
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PurchaseIDParam'
        - $ref: '#/components/parameters/LanguageQuery'
        - $ref: '#/components/parameters/ProjectQuery'
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  purchase:
                    $ref: '#/components/schemas/Purchase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - Purchases
      summary: Update details of a specific purchase - Admin
      description: |
        This endpoint updates details of the purchase identified by the purchaseID parameter.

        **Only Admin can perform this action**
      operationId: updatePurchase
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PurchaseIDParam'
        - $ref: '#/components/parameters/LanguageQuery'
      requestBody:
        description: Admin can update any field of the purchase
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  format: float
                  description: The price of a single unit of the purchased item
                  example: 1111
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  purchase:
                    $ref: '#/components/schemas/Purchase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Purchases
      summary: Delete a specific purchase - Admin
      description: |
        Deletes the purchase record with the specified ID.

        **Only Admin can perform this action**
      operationId: deletePurchase
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PurchaseIDParam'
        - $ref: '#/components/parameters/LanguageQuery'
      responses:
        '204':
          description: Successfully deleted the purchase
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # Reviews ##########

  /api/v1/products/{productID}/reviews/product-reviews:
    get:
      tags:
        - Reviews
      summary: Retrieve reviews for a specific product
      description: |
        Returns a list of reviews for the specified product ID.
      operationId: getProductReviews
      parameters:
        - $ref: '#/components/parameters/ProductIDParam'
        - $ref: '#/components/parameters/LanguageQuery'
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "rating": 5 }

            Sorting: { "sort": "rating" }

            Projecting: { "fields": "rating" }

            Pagination: { "page": 1, "limit": 3 }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/reviews:
    get:
      tags:
        - Reviews
      summary: Retrieve reviews
      description: |
        Returns a list of reviews. Admin users can retrieve all reviews, while regular users can only retrieve their own reviews.
      operationId: getAllReviews
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
        - in: query
          name: additions
          description: |
            Advanced filtering, sorting, projecting, pagination.

            Filtering: { "rating": 5 }

            Sorting: { "sort": "rating" }

            Projecting: { "fields": "rating" }

            Pagination: { "page": 1, "limit": 3 }
          required: false
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags:
        - Reviews
      summary: Create a new review
      description: |
        Creates a new review for a product. Only users who have already bought the product can review it, and only one review per user per product is allowed.
      operationId: createReview
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LanguageQuery'
      requestBody:
        description: Review details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  $ref: '#/components/schemas/ID'
                review:
                  type: string
                  example: 'Amazing'
                rating:
                  type: integer
                  example: 5
      responses:
        '201':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  review:
                    type: object
                    properties:
                      _id:
                        $ref: '#/components/schemas/ID'
                      product:
                        $ref: '#/components/schemas/ID'
                      user:
                        $ref: '#/components/schemas/ID'
                      review:
                        type: string
                        example: 'Amazing'
                      rating:
                        type: integer
                        example: 5
                      createdAt:
                        $ref: '#/components/schemas/CreatedAt'
                      updatedAt:
                        $ref: '#/components/schemas/UpdatedAt'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/v1/reviews/{reviewID}:
    patch:
      tags:
        - Reviews
      summary: Update a review
      description: |
        Updates an existing review. Only the user who created the review can update it.
      operationId: updateReview
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ReviewIDParam'
        - $ref: '#/components/parameters/LanguageQuery'
      requestBody:
        description: Review details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: string
                  example: 'Amazing'
                rating:
                  type: integer
                  example: 5
      responses:
        '200':
          description: Successful response containing the list of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/SuccessMessage'
                  language:
                    $ref: '#/components/schemas/Language'
                  numResults:
                    $ref: '#/components/schemas/NumResults'
                  review:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Reviews
      summary: Delete a review
      description: |
        Deletes an existing review. Only the user who created the review or an admin can delete it.
      operationId: deleteReview
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ReviewIDParam'
        - $ref: '#/components/parameters/LanguageQuery'
      responses:
        '204':
          description: Review deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    SuccessMessage:
      type: string
      description: The status of the response.
      example: success

    FailMessage:
      type: string
      description: The status of the response.
      example: fail

    ErrorMessage:
      type: string
      description: The status of the response.
      example: error

    Language:
      type: string
      description: The language of the response.
      example: en-us

    NumResults:
      type: integer
      description: The number of entities returned.
      example: 1

    ID:
      type: string
      format: MongoID
      description: The unique identifier for the entity.
      example: '6644461874a0a872f25dbc1c'

    CreatedAt:
      type: string
      format: date-time
      description: The date and time when the entity was created.
      example: 2024-05-10T14:35:35.535Z

    UpdatedAt:
      type: string
      format: date-time
      description: The date and time when the entity was last updated.
      example: 2024-05-10T14:35:35.535Z

    ModifiedCount:
      type: integer
      description: The number of documents modified in the operation
      example: 1

    MatchedCount:
      type: integer
      description: The number of documents matched in the operation
      example: 1

    Product:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: The name of the product.
          example: Jimei Palace Aatrox 1/6 Scale Statue
        price:
          type: object
          properties:
            default:
              type: number
              format: float
              description: The default price of the product.
              example: 489.99
            saleAmount:
              type: number
              format: float
              description: The sale amount for the product.
              example: 0
            currency:
              type: string
              description: The currency of the price.
              example: USD
        ratingsAverage:
          type: number
          format: float
          description: The average rating of the product.
          example: 0
        ratingsQuantity:
          type: integer
          description: The number of ratings for the product.
          example: 0
        editions:
          type: object
          properties:
            en:
              type: array
              description: Editions in English.
              items:
                type: string
                enum:
                  - limited edition
                  - preorder
                  - special edition
                example: limited edition
            other:
              type: array
              description: Editions in other languages.
              items:
                type: string
                example: ÉDITION LIMITÉE,
        images:
          type: array
          items:
            type: string
            format: uri
            example: https://images.contentstack.io/v3/assets/blt5bbf09732528de36/bltf457399168c2b817/659873e5dc766225e97ebf22/CPX_JIMEIAatrox_Ecomm_1.png
        type:
          type: string
          enum:
            - figure
            - game
            - cloth
            - item
          description: The type of product.
          example: figure
        category:
          type: string
          enum:
            - featured
            - sale
          description: The category of the product.
          example: featured
        optional:
          type: object
          description: Metadata about product like give away,...
          properties:
            title:
              type: string
            image:
              type: string
              format: uri
        sizes:
          type: array
          description: The sizes of product like T-Shirt.
          items:
            type: string
            example: XS
        platforms:
          type: array
          description: Product like codes of a game that have indication of supported platforms.
          items:
            type: string
            example: Switch
        regions:
          type: array
          description: Regions where products are only available.
          items:
            type: string
            example: North America
        check:
          type: string
          description: Terms of Service that user has to follow
          example: I understand the game code is non-refundable and non-exchangeable. The game region and platform I need are selected.
        warning:
          type: string
          description: The warning associated with the product.
          example: This product is a collector's item intended for ages 14+.
        shippingDays:
          type: integer
          description: The number of days required for shipping.
          example: 7
        quote:
          type: string
          description: A notable quote related to the product.
          example: Now, hear the silence of annihilation.
        descriptions:
          type: array
          description: Maybe some stories that are related to the product.
          items:
            type: string
            example: Once a mighty Shuriman champion remade as an Ascended, Aatrox helped halt the onslaught of the Void during the Icathian rebellion. However, in time, with no monarch or existential threat to defend against, Aatrox and the other Sunborn began to clash in a war for the ruins of the world.
        features:
          type: array
          description: The features of the product.
          items:
            type: string
            example: LED sword, eyes, and wings lighting effect.
        approximateDimensions:
          type: object
          description: The approximate dimensions of the product.
          properties:
            value:
              type: array
              items:
                type: array
                items:
                  type: number
                  format: float
                  example: 18.1
            en:
              type: array
              description: In Enlish.
              items:
                type: string
                enum:
                  - height
                  - width
                  - depth
                example: height
            other:
              type: array
              description: In other languages.
              items:
                type: string
                example: hauteur
        funFact:
          type: string
          description: A fun fact about the product.
          example: Made in partnership with our friends at Jimei Palace.
        series:
          type: string
          description: The series of the product.
          example: 'Blood Moon Aatrox Figure is number #05 in Series 4.'
        materials:
          type: array
          description: The materials of the product.
          items:
            type: string
            example: Zinc Alloy Masks
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/UpdatedAt'

    User:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: 'The name of the user'
          example: 'Tester'
        email:
          $ref: '#/components/schemas/Email'
        photo:
          type: string
          description: "The URL of the user's profile photo"
          example: '/img/users/default.png'
        active:
          type: boolean
          description: "Indicates whether the user's account is active (Use code received in user's email to activate user)"
          example: false
        role:
          type: string
          description: 'The role assigned to the user'
          example: 'user'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/UpdatedAt'

    Session:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/ID'
        user:
          $ref: '#/components/schemas/ID'
        valid:
          type: boolean
          description: Indicates if the session is valid
          example: true
        userAgent:
          type: string
          description: User agent string of the client
          example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/UpdatedAt'

    Purchase:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/ID'
        user:
          type: object
          description: Information about the user who made the purchase
          properties:
            _id:
              $ref: '#/components/schemas/ID'
              name:
                type: string
                description: The name of the user
                example: Tester
              photo:
                type: string
                description: URL to the user's photo
                example: /img/users/default.png
        price:
          type: number
          format: float
          description: The price of a single unit of the purchased item
          example: 20
        quantity:
          type: integer
          description: The quantity of the purchased item
          example: 2
        paid:
          type: boolean
          description: Whether the purchase has been paid for
          example: true
        shipped:
          type: boolean
          description: Whether the purchase has been shipped
          example: false
        product:
          type: object
          nullable: true
          description: The product details
          properties:
            _id:
              $ref: '#/components/schemas/ID'
            name:
              type: string
              description: The name of the product
              example: Jimei Palace Aatrox 1/6 Scale Statue
            price:
              type: object
              description: Price details of the product
              properties:
                default:
                  type: number
                  format: float
                  description: The default price of the product
                  example: 489.99
                saleAmount:
                  type: number
                  format: float
                  description: The sale amount deducted from the default price
                  example: 0
                currency:
                  type: string
                  description: The currency of the price
                  example: USD
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/UpdatedAt'
        totalPrice:
          type: number
          format: float
          description: The total price for the purchase (price * quantity)
          example: 40

    Review:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/ID'
          product:
            type: object
            properties:
              _id:
                $ref: '#/components/schemas/ID'
              name:
                type: string
                example: 'Jimei Palace Aatrox 1/6 Scale Statue'
        user:
          type: object
          properties:
            _id:
              $ref: '#/components/schemas/ID'
            name:
              type: string
              example: 'Tester'
            photo:
              type: string
              example: '/img/users/default.png'
        review:
          type: string
          example: 'Amazing'
        rating:
          type: integer
          example: 5
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/UpdatedAt'

    Email:
      type: string
      description: 'The email address of the user'
      example: 'tester@gmail.com'

    Code:
      type: string
      description: "The code sent to the user's email"
      example: '0b0ada25c3ba'

    Password:
      type: string
      description: 'The new password for the user account (Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character).'
      example: 'userpassword3Mm$'

    Stats:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            description: 'The identifier'
            example: 'IDENTIFIER'
          numProducts:
            $ref: '#/components/schemas/NumResults'
          productID:
            type: array
            items:
              type: string
            description: 'An array of product IDs in the category'
            example: ['663e30b7947d905b5b603126']
          ratingsAverage:
            type: number
            description: 'The average rating of products in the category'
            example: 4.2
          avgShippingDays:
            type: number
            description: 'The average shipping days of products in the category'
            example: 5
          avgPrice:
            type: number
            format: float
            description: 'The average price of products in the category'
            example: 55.99
          minPrice:
            type: number
            format: float
            description: 'The minimum price of products in the category'
            example: 25.99
          maxPrice:
            type: number
            format: float
            description: 'The maximum price of products in the category'
            example: 89.99
          avgSaleAmount:
            type: number
            format: float
            description: 'The average sale amount of products in the category'
            example: 10.5
          minSaleAmount:
            type: number
            format: float
            description: 'The minimum sale amount of products in the category'
            example: 5.99
          maxSaleAmount:
            type: number
            format: float
            description: 'The maximum sale amount of products in the category'
            example: 15.99
          avgPriceAfterSale:
            type: number
            format: float
            description: 'The average price after sale of products in the category'
            example: 45.99
          minPriceAfterSale:
            type: number
            format: float
            description: 'The minimum price after sale of products in the category'
            example: 39.99
          maxPriceAfterSale:
            type: number
            format: float
            description: 'The maximum price after sale of products in the category'
            example: 59.99
          currency:
            type: string
            description: 'The currency used for prices'
            example: 'USD'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    LanguageQuery:
      in: query
      name: language
      description: The language (**en-us** | **fr**) of entities to return. **en-us** is the default value.
      required: false
      schema:
        type: string

    ServerlessIDQuery:
      in: query
      name: id
      description: The ID of entitity to return.
      required: false
      schema:
        type: string

    ProjectQuery:
      in: query
      name: fields
      description: Project the fields of entity (filed="name").
      required: false
      schema:
        type: string

    ProductIDParam:
      in: path
      name: productID
      description: The unique identifier of the product.
      required: true
      schema:
        type: string

    ReviewIDParam:
      in: path
      name: reviewID
      description: The unique identifier of the review.
      required: true
      schema:
        type: string

    EmailParam:
      in: path
      name: email
      required: true
      schema:
        type: string
      description: The email address of the user.
      example: 'tester@gmail.com'

    UserIDParam:
      in: path
      name: userID
      required: true
      description: The ID of the user whose entities to retrieve
      schema:
        type: string

    SessionIDParam:
      in: path
      name: sessionID
      required: true
      description: The ID of the session to retrieve
      schema:
        type: string

    PurchaseIDParam:
      in: path
      name: purchaseID
      required: true
      description: The ID of the purchase to retrieve
      schema:
        type: string

  responses:
    BadRequest:
      description: Bad request!
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/FailMessage'
              message:
                type: string
                description: The error message explaining why the request failed.
                example: Something went wrong! (This can be any string based on the received error)

    LanguageNotSupported:
      description: Bad request - Language is not supported!
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/FailMessage'
              message:
                type: string
                description: The error message explaining why the request failed.
                example: Language 'language' is not supported!

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/FailMessage'
              message:
                type: string
                description: The error message explaining that the entity was not found.
                example: Entity not found!

    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/ErrorMessage'
              message:
                type: string
                example: Something went wrong!

    InvalidOrExpiredToken:
      description: Invalid or Expired Token
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/FailMessage'
              message:
                type: string
                description: The error message explaining why the request failed.
                example: Invalid token or token has expired!

    Unauthenticated:
      description: Unauthenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/FailMessage'
              message:
                type: string
                description: 'A message indicating that the user is unauthenticated'
                example: 'Unauthenticated! (This can be any string based on the received error)'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/FailMessage'
              message:
                type: string
                description: 'A message indicating that the user is unauthorized'
                example: 'Unauthorized! (This can be any string based on the received error)'
